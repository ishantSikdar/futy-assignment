interface Icon {
  width?: number,
  height?: number,
  color?: string,
}

export const UserIcon = ({ width = 256, height = 256, color = 'black', ...props }: Icon) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    xmlnsXlink="http://www.w3.org/1999/xlink"
    version="1.1"
    width={width}
    height={height}
    viewBox="0 0 256 256"
    xmlSpace="preserve"
    {...props} // Spread the remaining props
  >
    <defs></defs>
    <g
      style={{
        stroke: 'none',
        strokeWidth: 0,
        strokeDasharray: 'none',
        strokeLinecap: 'butt',
        strokeLinejoin: 'miter',
        strokeMiterlimit: 10,
        fill: 'none',
        fillRule: 'nonzero',
        opacity: 1,
      }}
      transform="translate(1.4065934065934016 1.4065934065934016) scale(2.81 2.81)"
    >
      <path
        d="M 45 0 C 20.147 0 0 20.147 0 45 c 0 24.853 20.147 45 45 45 s 45 -20.147 45 -45 C 90 20.147 69.853 0 45 0 z M 45 22.007 c 8.899 0 16.14 7.241 16.14 16.14 c 0 8.9 -7.241 16.14 -16.14 16.14 c -8.9 0 -16.14 -7.24 -16.14 -16.14 C 28.86 29.248 36.1 22.007 45 22.007 z M 45 83.843 c -11.135 0 -21.123 -4.885 -27.957 -12.623 c 3.177 -5.75 8.144 -10.476 14.05 -13.341 c 2.009 -0.974 4.354 -0.958 6.435 0.041 c 2.343 1.126 4.857 1.696 7.473 1.696 c 2.615 0 5.13 -0.571 7.473 -1.696 c 2.083 -1 4.428 -1.015 6.435 -0.041 c 5.906 2.864 10.872 7.591 14.049 13.341 C 66.123 78.957 56.135 83.843 45 83.843 z"
        style={{
          stroke: 'none',
          strokeWidth: 1,
          strokeDasharray: 'none',
          strokeLinecap: 'butt',
          strokeLinejoin: 'miter',
          strokeMiterlimit: 10,
          fill: color,
          fillRule: 'nonzero',
          opacity: 1,
        }}
        transform="matrix(1 0 0 1 0 0)"
        strokeLinecap="round"
      />
    </g>
  </svg>
)

export const CoinIcon = ({ width = 200, height = 200, color = "#C83700", ...props }: Icon) => (
  <svg
    fill={color}
    height={height}
    width={width}
    version="1.1"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 512 512"
    xmlSpace="preserve"
    stroke={color}
    enableBackground="new 0 0 512 512"
    {...props}
  >
    <g>
      <g>
        <path d="m256,11c-135.1,0-245,109.9-245,245s109.9,245 245,245c135.1,0 245-109.9 245-245s-109.9-245-245-245zm0,449.2c-112.6,0-204.2-91.6-204.2-204.2 0-112.6 91.6-204.2 204.2-204.2 112.6,0 204.2,91.6 204.2,204.2 0,112.6-91.6,204.2-204.2,204.2z"></path>
        <path d="m268.8,224.8v-66.5c11,4.8 17.8,13.8 20.4,27.2l43-5.6c-2.9-17-9.8-30.6-20.4-40.7-10.7-10.2-25-16.3-43-18.5v-16.8h-24.7v16.8c-19.5,1.9-35.1,9.2-46.9,21.9-11.7,12.6-17.6,28.3-17.6,46.9 0,18.4 5.2,34 15.6,46.9 10.4,12.9 26.7,22.5 48.9,28.8v71.3c-6.1-2.9-11.7-7.7-16.7-14.3-5-6.6-8.4-14.4-10.2-23.5l-44.4,4.8c3.4,22.3 11.2,39.6 23.5,51.9s28.2,19.6 47.8,21.9v31h24.7v-31.8c22.1-3.2 39.4-11.8 51.8-25.9 12.4-14.1 18.6-31.4 18.6-51.9 0-18.4-4.9-33.4-14.8-45.2-9.9-11.8-28.4-21.3-55.6-28.7zm-24.7-8.2c-36.1-11.8-24.2-58.9 0-58.9v58.9zm24.7 122.2v-66.4c36.2 7 33.1 59.5 0 66.4z"></path>
      </g>
    </g>
  </svg>
);

export const ArrowIcon = ({ width = 200, height = 200, color = "#C83700", ...props }: Icon) => {
  return (
    <svg
      version="1.1"
      xmlns="http://www.w3.org/2000/svg"
      width={width}
      height={height}
      viewBox="0 0 512 512"
      {...props}
    >
      <path d="M0 0 C5.75263769 4.18008411 10.71862798 8.95023983 15.73265135 13.97867411 C16.64588553 14.88667162 17.55911971 15.79466912 18.50002766 16.73018169 C21.01740473 19.23347023 23.5285847 21.74289369 26.03870499 24.25345594 C28.75364671 26.9667414 31.47428841 29.67430187 34.19412291 32.38268107 C40.13110144 38.29687634 46.06066915 44.21846445 51.98879731 50.14152902 C55.6936718 53.84313984 59.40017506 57.54311674 63.10702193 61.24275225 C73.38064288 71.49681889 83.65269029 81.75245429 93.91799414 92.01484793 C94.9019746 92.99854703 94.9019746 92.99854703 95.90583345 94.00211884 C97.2355072 95.33142637 98.56517969 96.66073516 99.89485092 97.99004521 C100.55485137 98.64986285 101.21485182 99.30968048 101.89485228 99.9894926 C102.5556615 100.65012127 103.21647072 101.31074994 103.89730446 101.99139766 C114.60794533 112.69849591 125.33028121 123.39379868 136.05782087 134.0839633 C147.08515764 145.07318881 158.10308138 156.07177751 169.1115303 167.07992458 C175.2871705 173.25498099 181.46668013 179.42604795 187.65649855 185.58689517 C192.92584244 190.83168795 198.18643893 196.0850643 203.43600835 201.34965249 C206.1120088 204.03280549 208.79180889 206.71183554 211.48276389 209.37999743 C214.4060617 212.2787712 217.30942443 215.19674941 220.21141112 218.11685771 C221.05615858 218.9484052 221.90090605 219.7799527 222.77125192 220.6366986 C232.2388583 230.23945209 236.63474692 239.27229345 236.66194212 252.65233439 C236.39474923 267.23248986 227.04814436 276.464416 217.2315985 286.25282878 C216.32360099 287.16606296 215.41560349 288.07929714 214.48009092 289.02020508 C211.97680238 291.53758216 209.46737892 294.04876212 206.95681667 296.55888242 C204.24353121 299.27382414 201.53597074 301.99446583 198.82759154 304.71430033 C192.91339627 310.65127887 186.99180816 316.58084657 181.06874359 322.50897473 C177.36713277 326.21384922 173.66715587 329.92035248 169.96752036 333.62719935 C159.71345372 343.9008203 149.45781832 354.17286772 139.19542468 364.43817157 C138.53962528 365.09415854 137.88382588 365.75014551 137.20815377 366.42601087 C135.87884624 367.75568463 134.54953745 369.08535712 133.2202274 370.41502835 C132.56040976 371.0750288 131.90059213 371.73502924 131.22078001 372.4150297 C130.56015134 373.07583892 129.89952267 373.73664814 129.21887495 374.41748188 C118.5117767 385.12812275 107.81647393 395.85045863 97.12630931 406.5779983 C86.1370838 417.60533507 75.1384951 428.62325881 64.13034803 439.63170773 C57.95529162 445.80734793 51.78422466 451.98685756 45.62337744 458.17667598 C40.37858466 463.44601986 35.12520831 468.70661635 29.86062012 473.95618577 C27.17746712 476.63218622 24.49843707 479.31198632 21.83027518 482.00294131 C18.93150141 484.92623913 16.0135232 487.82960185 13.0934149 490.73158854 C11.84609366 491.99870974 11.84609366 491.99870974 10.57357401 493.29142934 C0.91200718 502.81702134 -8.06925604 507.13298208 -21.51237428 507.11180705 C-31.98276372 506.93856624 -38.93890715 503.48886308 -46.34635866 496.20116252 C-54.28418149 487.48746226 -56.25484899 478.55603314 -55.97917116 467.03710002 C-54.91055241 447.82813292 -33.89567958 432.96513926 -21.24015749 420.3369047 C-19.39597885 418.4930086 -17.5520213 416.64889135 -15.70826662 414.80457133 C-11.76057076 410.85635471 -7.81106888 406.90995247 -3.86028421 402.96482676 C1.85166996 397.26104881 7.56081415 391.55446485 13.26930729 385.84722325 C22.53421309 376.58449843 31.80134319 367.32400235 41.06990111 358.06493205 C50.06587416 349.07815793 59.06078147 340.09031928 68.05427611 331.10106486 C68.60995432 330.54564937 69.16563254 329.99023388 69.73814949 329.41798761 C72.5262111 326.63123118 75.31425196 323.84445398 78.10228252 321.05766648 C101.17998998 297.99030186 124.26131936 274.92656461 147.34504759 251.86522502 C145.98506235 248.82450813 144.45790813 246.73131523 142.10155928 244.3868143 C141.42898203 243.71272174 140.75640478 243.03862919 140.0634464 242.34410959 C139.32241178 241.61162914 138.58137716 240.87914868 137.81788695 240.12447184 C137.03228589 239.3399842 136.24668483 238.55549655 135.43727767 237.74723655 C132.79502247 235.11106919 130.14569749 232.48212138 127.49641478 229.85301799 C125.60394276 227.96765623 123.71188365 226.08188903 121.82037413 224.19556254 C117.74129232 220.12908047 113.65878853 216.06606044 109.57416594 212.0051443 C103.65993025 206.12487199 97.75313143 200.23717276 91.84851113 194.34724696 C82.25718744 184.77982277 72.66287298 175.21540498 63.06526244 165.65428752 C62.49077865 165.08198398 61.91629487 164.50968044 61.32440248 163.92003436 C53.17983349 155.8066557 45.03227791 147.69628282 36.88350204 139.58712967 C36.31023102 139.01664527 35.73695999 138.44616088 35.14631712 137.85838908 C34.57374484 137.28860386 34.00117256 136.71881864 33.41124961 136.1317672 C23.8507499 126.61740199 14.29802807 117.09527126 4.75159824 107.56678897 C-1.13301839 101.6938558 -7.02404882 95.82750655 -12.92358068 89.96955563 C-16.97038378 85.95025485 -21.00985831 81.92368464 -25.04374024 77.8914163 C-27.36849388 75.56806504 -29.69743474 73.24920745 -32.03318155 70.93690127 C-34.57146273 68.42310629 -37.09699462 65.89713569 -39.61985719 63.36788005 C-40.35196892 62.64878392 -41.08408066 61.92968779 -41.83837759 61.18880087 C-49.56111482 53.3899589 -55.82109122 44.39743203 -55.98454225 33.10545939 C-55.9789026 32.42805705 -55.97326295 31.7506547 -55.96745241 31.05272502 C-55.96181276 30.34567424 -55.95617311 29.63862345 -55.95036256 28.91014689 C-55.70904269 18.50233154 -52.23567554 11.53765018 -44.99088991 4.17381877 C-32.92715395 -6.81574892 -13.80389686 -9.46511619 0 0 Z " fill={color} transform="translate(165.65495240688324,5.13477498292923)" />
    </svg>
  )
}


export const FootballIcon = ({ width = 200, height = 200, color = "#C83700", ...props }: Icon) => {
  return (
    <svg
      version="1.1"
      id="Layer_1"
      xmlns="http://www.w3.org/2000/svg"
      xmlnsXlink="http://www.w3.org/1999/xlink"
      x="0px"
      y="0px"
      height={height}
      width={width}
      viewBox="0 0 122.88 122.88"
      style={{ fill: color }}
      xmlSpace="preserve"
      {...props} // Spread any additional props (like className, style, etc.)
    >
      <style type="text/css">{`.st0{fill-rule:evenodd;clip-rule:evenodd;}`}</style>
      <g>
        <path
          className="st0"
          d="M61.44,0c16.97,0,32.33,6.88,43.44,18c11.12,11.12,18,26.48,18,43.44c0,16.97-6.88,32.33-18,43.44 c-11.12,11.12-26.48,18-43.44,18S29.11,116,18,104.88C6.88,93.77,0,78.41,0,61.44C0,44.47,6.88,29.11,18,18 C29.11,6.88,44.47,0,61.44,0L61.44,0z M76.85,117.08L76.73,117l6.89-23.09L69.41,78.15L52.66,78L39.38,94.62l6.66,22.32l-0.15,0.1 c4.95,1.38,10.16,2.12,15.55,2.12C66.78,119.16,71.95,118.44,76.85,117.08L76.85,117.08z M12.22,91.61l24.34,0.12L49.28,75.8 l-5.26-16.12l-21.42-9.3L3.78,64.08C4.23,74.14,7.26,83.53,12.22,91.61L12.22,91.61z M16.77,24.88l7.4,22.14l19.98,8.68 l15.44-11.97V20.94L40.51,7.63c-7.52,2.93-14.28,7.39-19.89,13C19.27,21.98,17.98,23.4,16.77,24.88L16.77,24.88z M81.7,7.37 L63.3,20.77V43.7L77.8,54.91l20.81-8.92l7.18-21.49c-1.12-1.35-2.3-2.64-3.54-3.88C96.48,14.85,89.49,10.29,81.7,7.37L81.7,7.37z M119.09,64.36l-0.02,0.01L99.09,49.82l-19.81,8.49l-6.08,18.03l13.73,15.23c0.06,0.06,0.09,0.13,0.11,0.21l23.6-0.11 C115.56,83.65,118.59,74.34,119.09,64.36L119.09,64.36z"
        />
      </g>
    </svg>
  );
};

export const GamepadIcon = ({ color = 'black', height = 100, width = 100, ...props }: Icon) => {
  return (
    <svg
      version="1.1"
      id="Layer_1"
      xmlns="http://www.w3.org/2000/svg"
      xmlnsXlink="http://www.w3.org/1999/xlink"
      x="0px"
      y="0px"
      viewBox="0 0 122.88 79.92"
      height={height}
      width={width}
      style={{ fill: color }} // Set color and dimensions
      xmlSpace="preserve"
      {...props} // Spread any additional props (like className, style, etc.)
    >
      <style type="text/css">{`.st0{fill-rule:evenodd;clip-rule:evenodd;}`}</style>
      <g>
        <path
          className="st0"
          d="M23.35,72.21c4.04-4.11,8.82-8.28,12.37-13.68h51.43c3.56,5.39,8.34,9.57,12.37,13.68 c30.95,31.52,28.87-42.32,7-64.5h-1.68C102.09,3.11,96.72,0,90.55,0c-6.17,0-11.53,3.11-14.28,7.71H46.61 C43.86,3.11,38.49,0,32.32,0c-6.17,0-11.53,3.11-14.29,7.71h-1.68C-5.52,29.89-7.6,103.72,23.35,72.21L23.35,72.21z M29.85,12.84 h11.11v8.85l8.85,0V32.8h-8.85v8.85H29.85V32.8H21V21.69h8.85L29.85,12.84L29.85,12.84L29.85,12.84z M83.16,36.9 c2.69,0,4.87,2.18,4.87,4.87c0,2.69-2.18,4.88-4.87,4.88s-4.87-2.18-4.87-4.88C78.29,39.08,80.47,36.9,83.16,36.9L83.16,36.9z M85.82,15.21c3.9,0,7.06,3.16,7.06,7.05c0,3.9-3.16,7.05-7.06,7.05c-3.9,0-7.05-3.16-7.05-7.05 C78.77,18.37,81.92,15.21,85.82,15.21L85.82,15.21z M104.04,26.11c2.69,0,4.87,2.18,4.87,4.87c0,2.69-2.18,4.87-4.87,4.87 c-2.69,0-4.88-2.18-4.88-4.87C99.16,28.29,101.35,26.11,104.04,26.11L104.04,26.11z"
        />
      </g>
    </svg>
  );
};


export const SearchIcon = ({ color = 'black', height = 100, width = 100, ...props }: Icon) => (
  <svg fill={color} height={height} viewBox="0 0 24 24" width={width} xmlns="http://www.w3.org/2000/svg" {...props}><path d="m19.25 19.25-3.75-3.75m-10.75-4.5c0-3.45178 2.79822-6.25 6.25-6.25 3.4518 0 6.25 2.79822 6.25 6.25 0 3.4518-2.7982 6.25-6.25 6.25-3.45178 0-6.25-2.7982-6.25-6.25z" stroke="#ffffff" strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" /></svg>
)

export const BurgerIcon = ({ color, width, height }: Icon) => (
  <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" width={width} height={height}>
    <g clipPath="url(#clip0_429_11066)">
      <path d="M3 6.00092H21M3 12.0009H21M3 18.0009H21" stroke={color} strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round"></path>
    </g>
    <defs>
      <clipPath id="clip0_429_11066">
        <rect width="24" height="24" fill="white" transform="translate(0 0.000915527)"></rect>
      </clipPath>
    </defs>
  </svg>
);